import random as rnd

#region functions
def main():  # main function to roll nDice fair dice nRolls times and output probabilities
    """
    This function rolls nDice nRolls times and calculates the probabilities for
    each possible score based on P(7)=nTally/nRolls, where nTally is number times I roll a 7, for example.
    :return: nothing
    """
    nDice = 2  # number of dice
    nMinScore = nDice  # total score if each die scores 1
    nMaxScore = 6 * nDice  # total score if each die scores 6
    nNumScores = nMaxScore - nMinScore + 1  # number of possible scores (from 2 to 12 for 2 dice)
    nTally = [0] * nNumScores  # list to tally how many times each score occurs
    nRolls = 10000  # how many times to roll the dice

    for i in range(nRolls):  # each loop rolls dice and increments a score
        roll_sum = rnd.randint(1, 6) + rnd.randint(1, 6)  # roll two dice
        nTally[roll_sum - nMinScore] += 1  # increment the corresponding tally (adjust for zero indexing)

    # Print the probability of each score
    for i in range(nNumScores):
        score = i + nMinScore
        print("Score {}: {:.4f}".format(score, nTally[i] / nRolls))  # probability of each score

def main2():  # main function to roll nDice unfair dice nRolls times and output probabilities
    """
    This function rolls nDice nRolls times and calculates the probabilities for
    each possible score based on P(7)=nTally/nRolls, where nTally is number times I roll a 7, for example.
    :return: nothing
    """
    nDice = 2  # number of dice
    nMinScore = nDice  # total score if each die scores 1
    nMaxScore = 6 * nDice  # total score if each die scores 6
    nNumScores = nMaxScore - nMinScore + 1  # number of possible scores
    nTally = [0] * nNumScores  # list to tally how many times each score occurs
    nRolls = 10000  # how many times to roll the dice

    # Define the unfair dice (not uniform, more likely to roll higher numbers)
    def unfair_roll():
        return rnd.choices([1, 2, 3, 4, 5, 6], [0.05, 0.1, 0.15, 0.2, 0.25, 0.25])[0]

    for i in range(nRolls):  # each loop rolls dice and increments a score
        roll_sum = unfair_roll() + unfair_roll()  # roll two unfair dice
        nTally[roll_sum - nMinScore] += 1  # increment the corresponding tally (adjust for zero indexing)

    # Print the probability of each score
    print("After {} rolls of {} dice...".format(nRolls, nDice))
    for i in range(nNumScores):
        score = i + nMinScore
        print("Score {}: {:.4f}".format(score, nTally[i] / nRolls))  # probability of each score
#endregion

# this if statement prevents these calls if this file is imported as a module.
if __name__ == "__main__":
    main()
    main2()
